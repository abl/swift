// This file is automatically generated with generate-pipeline. Do Not Edit!
import Core
import Rules
import SwiftSyntax

/// Populates the provided pipeline with all implemented formatting and linting passes.
///
/// - Parameter pipeline: The pipeline to populate with passes.
func populate(_ pipeline: Pipeline) {
  /// MARK: File Passes
  pipeline.addFileRule(UseSpecialEscapeSequences.self)
  pipeline.addFileRule(UseOnlySpaces.self)
  pipeline.addFileRule(ValidFilename.self)
  pipeline.addFileRule(UseOnlyUTF8.self)

  /// MARK: Formatting Passes

  pipeline.addFormatter(
    DoNotUseSemicolons.self,
    for:
      CodeBlockSyntax.self,
      SourceFileSyntax.self
  )

  pipeline.addFormatter(
    OpenBraceWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    UseWhereClausesInForLoops.self,
    for:
      ForInStmtSyntax.self
  )

  pipeline.addFormatter(
    CloseBraceWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    ColonWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    NoVoidReturnOnFunctionSignature.self,
    for:
      FunctionSignatureSyntax.self
  )

  pipeline.addFormatter(
    NoParensAroundConditions.self,
    for:
      IfStmtSyntax.self,
      ConditionElementSyntax.self,
      SwitchStmtSyntax.self,
      RepeatWhileStmtSyntax.self
  )

  pipeline.addFormatter(
    CollectionLiteralWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    OneVariableDeclarationPerLine.self,
    for:
      CodeBlockSyntax.self,
      ClosureExprSyntax.self,
      AccessorBlockSyntax.self,
      SourceFileSyntax.self
  )

  pipeline.addFormatter(
    UseSingleLinePropertyGetter.self,
    for:
      AccessorBlockSyntax.self
  )

  pipeline.addFormatter(
    UseEnumForNamespacing.self,
    for:
      StructDeclSyntax.self,
      ClassDeclSyntax.self
  )

  pipeline.addFormatter(
    MultiLineTrailingCommas.self,
    for:
      ArrayExprSyntax.self,
      DictionaryExprSyntax.self
  )

  pipeline.addFormatter(
    AvoidInitializersForLiterals.self,
    for:
      FunctionCallExprSyntax.self
  )

  /// MARK: Linting Passes

  pipeline.addLinter(
    AllPublicDeclarationsHaveDocumentation.self,
    for:
      FunctionDeclSyntax.self,
      InitializerDeclSyntax.self,
      DeinitializerDeclSyntax.self,
      SubscriptDeclSyntax.self,
      ClassDeclSyntax.self,
      VariableDeclSyntax.self,
      StructDeclSyntax.self,
      ProtocolDeclSyntax.self,
      TypealiasDeclSyntax.self
  )

  pipeline.addLinter(
    AlwaysUseLowerCamelCase.self,
    for:
      VariableDeclSyntax.self,
      FunctionDeclSyntax.self,
      EnumCaseElementSyntax.self
  )
}
